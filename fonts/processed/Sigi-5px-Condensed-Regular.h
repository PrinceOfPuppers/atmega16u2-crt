#define CHAR_HEIGHT 15
#define MAX_CHAR_WIDTH 18
#define MAX_SEGMENTS 3

typedef struct CharacterData{
    uint8_t first_x;                  // first x value in offset list (allows for less beam oversaturation on prev char)
    uint8_t first_y;                  // first y ''
    uint8_t width;                  // full width of the character
    uint8_t length;                 // number of bytes for full char
    uint8_t segments;               // number of segments
    uint16_t offsets[MAX_SEGMENTS]; // offsets into characterArray for the start of each segment
    uint16_t lengths[MAX_SEGMENTS]; // number of bytes for segment
} CharacterData;

const CharacterData characterDataArray[] PROGMEM = {
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {0, 0, 0}, {0, 0, 0} },
    { 0, 0, 9, 0, 0, {0, 0, 0}, {0, 0, 0} }, //  
    { 0, 12, 3, 8, 2, {0, 2, 8}, {2, 6, 0} }, // !
    { 0, 0, 9, 8, 2, {8, 12, 16}, {4, 4, 0} }, // "
    { 0, 3, 15, 54, 1, {16, 70, 70}, {54, 0, 0} }, // #
    { 3, 12, 15, 42, 1, {70, 112, 112}, {42, 0, 0} }, // $
    { 0, 12, 15, 44, 1, {112, 156, 156}, {44, 0, 0} }, // %
    { 9, 12, 12, 20, 1, {156, 176, 176}, {20, 0, 0} }, // &
    { 0, 0, 3, 4, 1, {176, 180, 180}, {4, 0, 0} }, // '
    { 3, 0, 6, 10, 1, {180, 190, 190}, {10, 0, 0} }, // (
    { 0, 0, 6, 10, 1, {190, 200, 200}, {10, 0, 0} }, // )
    { 0, 0, 6, 10, 1, {200, 210, 210}, {10, 0, 0} }, // *
    { 0, 6, 9, 14, 1, {210, 224, 224}, {14, 0, 0} }, // +
    { 0, 12, 6, 4, 1, {224, 228, 228}, {4, 0, 0} }, // ,
    { 0, 6, 9, 6, 1, {228, 234, 234}, {6, 0, 0} }, // -
    { 0, 12, 3, 2, 1, {234, 236, 236}, {2, 0, 0} }, // .
    { 0, 12, 9, 10, 1, {236, 246, 246}, {10, 0, 0} }, // /
    { 0, 3, 9, 18, 1, {246, 264, 264}, {18, 0, 0} }, // 0
    { 0, 3, 9, 20, 1, {264, 284, 284}, {20, 0, 0} }, // 1
    { 0, 3, 12, 26, 1, {284, 310, 310}, {26, 0, 0} }, // 2
    { 0, 0, 12, 36, 1, {310, 346, 346}, {36, 0, 0} }, // 3
    { 0, 6, 12, 28, 1, {346, 374, 374}, {28, 0, 0} }, // 4
    { 0, 12, 9, 20, 1, {374, 394, 394}, {20, 0, 0} }, // 5
    { 6, 0, 12, 26, 1, {394, 420, 420}, {26, 0, 0} }, // 6
    { 0, 0, 9, 14, 1, {420, 434, 434}, {14, 0, 0} }, // 7
    { 0, 3, 12, 26, 1, {434, 460, 460}, {26, 0, 0} }, // 8
    { 3, 12, 12, 22, 1, {460, 482, 482}, {22, 0, 0} }, // 9
    { 0, 3, 3, 4, 2, {482, 484, 486}, {2, 2, 0} }, // :
    { 3, 3, 6, 6, 2, {486, 488, 492}, {2, 4, 0} }, // ;
    { 6, 0, 9, 10, 1, {492, 502, 502}, {10, 0, 0} }, // <
    { 0, 3, 9, 12, 2, {502, 508, 514}, {6, 6, 0} }, // =
    { 0, 0, 9, 10, 1, {514, 524, 524}, {10, 0, 0} }, // >
    { 3, 12, 9, 10, 2, {524, 526, 534}, {2, 8, 0} }, // ?
    { 9, 12, 15, 30, 1, {534, 564, 564}, {30, 0, 0} }, // @
    { 0, 12, 12, 36, 1, {564, 600, 600}, {36, 0, 0} }, // A
    { 0, 0, 12, 34, 1, {600, 634, 634}, {34, 0, 0} }, // B
    { 9, 3, 12, 18, 1, {634, 652, 652}, {18, 0, 0} }, // C
    { 0, 0, 12, 26, 1, {652, 678, 678}, {26, 0, 0} }, // D
    { 3, 6, 9, 28, 1, {678, 706, 706}, {28, 0, 0} }, // E
    { 0, 12, 9, 24, 1, {706, 730, 730}, {24, 0, 0} }, // F
    { 6, 6, 12, 24, 1, {730, 754, 754}, {24, 0, 0} }, // G
    { 0, 0, 12, 32, 1, {754, 786, 786}, {32, 0, 0} }, // H
    { 0, 0, 9, 30, 1, {786, 816, 816}, {30, 0, 0} }, // I
    { 0, 9, 12, 14, 1, {816, 830, 830}, {14, 0, 0} }, // J
    { 0, 0, 12, 28, 1, {830, 858, 858}, {28, 0, 0} }, // K
    { 0, 0, 9, 14, 1, {858, 872, 872}, {14, 0, 0} }, // L
    { 0, 0, 15, 34, 1, {872, 906, 906}, {34, 0, 0} }, // M
    { 0, 0, 12, 34, 1, {906, 940, 940}, {34, 0, 0} }, // N
    { 0, 3, 12, 22, 1, {940, 962, 962}, {22, 0, 0} }, // O
    { 0, 12, 12, 22, 1, {962, 984, 984}, {22, 0, 0} }, // P
    { 0, 3, 12, 36, 1, {984, 1020, 1020}, {36, 0, 0} }, // Q
    { 0, 12, 12, 30, 1, {1020, 1050, 1050}, {30, 0, 0} }, // R
    { 3, 12, 12, 16, 1, {1050, 1066, 1066}, {16, 0, 0} }, // S
    { 0, 0, 9, 22, 1, {1066, 1088, 1088}, {22, 0, 0} }, // T
    { 0, 0, 12, 20, 1, {1088, 1108, 1108}, {20, 0, 0} }, // U
    { 0, 0, 15, 18, 1, {1108, 1126, 1126}, {18, 0, 0} }, // V
    { 0, 0, 15, 26, 1, {1126, 1152, 1152}, {26, 0, 0} }, // W
    { 0, 0, 9, 26, 1, {1152, 1178, 1178}, {26, 0, 0} }, // X
    { 0, 0, 9, 18, 1, {1178, 1196, 1196}, {18, 0, 0} }, // Y
    { 0, 0, 12, 40, 1, {1196, 1236, 1236}, {40, 0, 0} }, // Z
    { 3, 0, 6, 14, 1, {1236, 1250, 1250}, {14, 0, 0} }, // [
    { 0, 0, 9, 10, 1, {1250, 1260, 1260}, {10, 0, 0} }, // backslash
    { 0, 0, 6, 14, 1, {1260, 1274, 1274}, {14, 0, 0} }, // ]
    { 0, 3, 9, 6, 1, {1274, 1280, 1280}, {6, 0, 0} }, // ^
    { 0, 12, 12, 8, 1, {1280, 1288, 1288}, {8, 0, 0} }, // _
    { 0, 0, 6, 4, 1, {1288, 1292, 1292}, {4, 0, 0} }, // `
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 0, 0, 0, 0, 0, {1292, 1292, 1292}, {0, 0, 0} },
    { 6, 0, 9, 14, 1, {1292, 1306, 1306}, {14, 0, 0} }, // {
    { 0, 0, 3, 10, 1, {1306, 1316, 1316}, {10, 0, 0} }, // |
    { 0, 0, 9, 14, 1, {1316, 1330, 1330}, {14, 0, 0} }, // }
    { 0, 6, 18, 12, 1, {1330, 1342, 1342}, {12, 0, 0} }, // ~
    { 0, 0, 0, 0, 0, {1342, 1342, 1342}, {0, 0, 0} }
};

const uint8_t characterArray[] PROGMEM = {
    0, 12, 0, 0, 0, 3, 0, 6, // ! 
    0, 0, 0, 3, 6, 0, 6, 3, // " 
    0, 3, 3, 3, 3, 0, 3, 3, 3, 6, 3, 9, 0, 9, 3, 9, 3, 12, 3, 9, 6, 9, 9, 9, 9, 6, 9, 3, 6, 3, 3, 3, 6, 3, 9, 3, 9, 0, 9, 3, 12, 3, 9, 3, 9, 6, 9, 9, 9, 12, 9, 9, 12, 9, // # 
    3, 12, 6, 12, 6, 9, 6, 6, 3, 6, 0, 3, 3, 0, 6, 0, 6, 3, 6, 6, 9, 6, 12, 9, 9, 12, 6, 12, 9, 12, 12, 9, 9, 6, 6, 6, 6, 3, 6, 0, 9, 0, // $ 
    0, 12, 3, 9, 6, 6, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 6, 6, 9, 3, 12, 0, 9, 3, 6, 6, 9, 9, 9, 12, 12, 12, 12, 9, 9, 9, // % 
    9, 12, 6, 9, 3, 12, 0, 9, 3, 6, 0, 3, 3, 0, 6, 3, 3, 6, 6, 9, // & 
    0, 0, 0, 3, // ' 
    3, 0, 0, 3, 0, 6, 0, 9, 3, 12, // ( 
    0, 0, 3, 3, 3, 6, 3, 9, 0, 12, // ) 
    0, 0, 0, 3, 3, 3, 3, 0, 0, 0, // * 
    0, 6, 3, 6, 3, 3, 3, 6, 3, 9, 3, 6, 6, 6, // + 
    0, 12, 3, 9, // , 
    0, 6, 3, 6, 6, 6, // - 
    0, 12, // . 
    0, 12, 0, 9, 3, 6, 6, 3, 6, 0, // / 
    0, 3, 0, 6, 0, 9, 3, 12, 6, 9, 6, 6, 6, 3, 3, 0, 0, 3, // 0 
    0, 3, 3, 3, 3, 0, 3, 3, 3, 6, 3, 9, 3, 12, 0, 12, 3, 12, 6, 12, // 1 
    0, 3, 3, 0, 6, 0, 9, 3, 6, 6, 3, 9, 3, 12, 0, 12, 3, 12, 6, 12, 9, 12, 6, 12, 3, 9, // 2 
    0, 0, 3, 0, 6, 0, 6, 3, 6, 6, 3, 6, 6, 6, 9, 9, 6, 12, 3, 12, 0, 12, 3, 12, 6, 12, 9, 9, 6, 6, 6, 3, 6, 0, 9, 0, // 3 
    0, 6, 3, 6, 3, 3, 6, 3, 6, 0, 6, 3, 6, 6, 3, 6, 6, 6, 6, 9, 6, 12, 6, 9, 6, 6, 9, 6, // 4 
    0, 12, 3, 12, 6, 9, 6, 6, 3, 6, 0, 6, 0, 3, 0, 0, 3, 0, 6, 0, // 5 
    6, 0, 3, 0, 0, 3, 0, 6, 0, 9, 3, 12, 6, 12, 9, 9, 6, 6, 3, 6, 0, 6, 3, 6, 0, 3, // 6 
    0, 0, 3, 0, 6, 0, 6, 3, 6, 6, 3, 9, 3, 12, // 7 
    0, 3, 3, 0, 6, 0, 9, 3, 6, 6, 3, 6, 0, 3, 3, 6, 0, 9, 3, 12, 6, 12, 9, 9, 6, 6, // 8 
    3, 12, 6, 12, 9, 9, 9, 6, 6, 6, 3, 6, 0, 3, 3, 0, 6, 0, 9, 3, 9, 6, // 9 
    0, 3, 0, 9, // : 
    3, 3, 0, 12, 3, 9, // ; 
    6, 0, 3, 3, 0, 6, 3, 9, 6, 12, // < 
    0, 3, 3, 3, 6, 3, 0, 9, 3, 9, 6, 9, // = 
    0, 0, 3, 3, 6, 6, 3, 9, 0, 12, // > 
    3, 12, 0, 0, 3, 0, 6, 3, 3, 6, // ? 
    9, 12, 6, 12, 3, 12, 0, 9, 0, 6, 0, 3, 3, 0, 6, 0, 6, 3, 6, 6, 9, 6, 12, 6, 12, 3, 9, 0, 6, 0, // @ 
    0, 12, 0, 9, 0, 6, 0, 3, 3, 0, 6, 0, 9, 3, 9, 6, 6, 6, 3, 6, 0, 6, 3, 6, 0, 3, 3, 6, 6, 6, 9, 6, 9, 9, 9, 12, // A 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 3, 12, 6, 12, 9, 9, 6, 6, 3, 6, 0, 6, 3, 6, 6, 6, 9, 3, 6, 0, 3, 0, 0, 0, // B 
    9, 3, 6, 0, 3, 0, 0, 3, 0, 6, 0, 9, 3, 12, 6, 12, 9, 9, // C 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 3, 12, 6, 12, 9, 9, 9, 6, 9, 3, 6, 0, 3, 0, 0, 0, // D 
    3, 6, 0, 6, 0, 3, 0, 0, 3, 0, 6, 0, 3, 0, 0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 3, 12, 6, 12, // E 
    0, 12, 0, 9, 0, 6, 0, 3, 0, 0, 3, 0, 6, 0, 3, 0, 0, 0, 0, 3, 0, 6, 3, 6, // F 
    6, 6, 9, 6, 9, 9, 9, 12, 6, 12, 3, 12, 0, 9, 0, 6, 0, 3, 3, 0, 6, 0, 9, 0, // G 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 0, 9, 0, 6, 3, 6, 6, 6, 9, 6, 9, 3, 9, 0, 9, 3, 9, 6, 9, 9, 9, 12, // H 
    0, 0, 3, 0, 3, 3, 3, 6, 3, 9, 3, 12, 0, 12, 3, 12, 6, 12, 3, 12, 3, 9, 3, 6, 3, 3, 3, 0, 6, 0, // I 
    0, 9, 3, 12, 6, 12, 9, 9, 9, 6, 9, 3, 9, 0, // J 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 0, 9, 0, 6, 3, 6, 6, 3, 9, 0, 6, 3, 3, 6, 6, 9, 9, 12, // K 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 3, 12, 6, 12, // L 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 0, 9, 0, 6, 0, 3, 3, 3, 6, 6, 9, 3, 12, 3, 12, 0, 12, 3, 12, 6, 12, 9, 12, 12, // M 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 0, 9, 0, 6, 0, 3, 3, 3, 6, 6, 9, 6, 9, 3, 9, 0, 9, 3, 9, 6, 9, 9, 9, 12, // N 
    0, 3, 0, 6, 0, 9, 3, 12, 6, 12, 9, 9, 9, 6, 9, 3, 6, 0, 3, 0, 0, 3, // O 
    0, 12, 0, 9, 0, 6, 0, 3, 0, 0, 3, 0, 6, 0, 9, 3, 6, 6, 3, 6, 0, 6, // P 
    0, 3, 0, 6, 0, 9, 3, 12, 6, 12, 6, 9, 9, 6, 9, 3, 6, 0, 3, 0, 0, 3, 3, 0, 6, 0, 9, 3, 9, 6, 6, 9, 9, 12, 6, 12, // Q 
    0, 12, 0, 9, 0, 6, 0, 3, 0, 0, 3, 0, 6, 0, 9, 3, 6, 6, 3, 6, 0, 6, 3, 6, 6, 6, 6, 9, 9, 12, // R 
    3, 12, 6, 12, 9, 9, 6, 6, 3, 6, 0, 3, 3, 0, 6, 0, // S 
    0, 0, 3, 0, 3, 3, 3, 6, 3, 9, 3, 12, 3, 9, 3, 6, 3, 3, 3, 0, 6, 0, // T 
    0, 0, 0, 3, 0, 6, 0, 9, 3, 12, 6, 12, 9, 9, 9, 6, 9, 3, 9, 0, // U 
    0, 0, 0, 3, 3, 6, 3, 9, 6, 12, 9, 9, 9, 6, 12, 3, 12, 0, // V 
    0, 0, 0, 3, 0, 6, 0, 9, 3, 12, 6, 9, 6, 6, 6, 9, 9, 12, 12, 9, 12, 6, 12, 3, 12, 0, // W 
    0, 0, 0, 3, 3, 6, 0, 9, 0, 12, 0, 9, 3, 6, 6, 3, 6, 0, 6, 3, 3, 6, 6, 9, 6, 12, // X 
    0, 0, 0, 3, 3, 6, 3, 9, 3, 12, 3, 9, 3, 6, 6, 3, 6, 0, // Y 
    0, 0, 3, 0, 6, 0, 6, 3, 3, 6, 0, 9, 0, 12, 3, 12, 6, 12, 9, 12, 6, 12, 3, 12, 0, 9, 3, 12, 0, 12, 0, 9, 3, 6, 6, 3, 6, 0, 9, 0, // Z 
    3, 0, 0, 0, 0, 3, 0, 6, 0, 9, 0, 12, 3, 12, // [ 
    0, 0, 0, 3, 3, 6, 6, 9, 6, 12, // backslash 
    0, 0, 3, 0, 3, 3, 3, 6, 3, 9, 3, 12, 0, 12, // ] 
    0, 3, 3, 0, 6, 3, // ^ 
    0, 12, 3, 12, 6, 12, 9, 12, // _ 
    0, 0, 3, 3, // ` 
    6, 0, 3, 0, 3, 3, 0, 6, 3, 9, 3, 12, 6, 12, // { 
    0, 0, 0, 3, 0, 6, 0, 9, 0, 12, // | 
    0, 0, 3, 0, 3, 3, 6, 6, 3, 9, 3, 12, 0, 12, // } 
    0, 6, 3, 3, 6, 3, 9, 6, 12, 6, 15, 3, // ~ 
};
typedef struct CharacterData{
    uint8_t width;
    uint8_t segments;
    uint16_t offsets[3];
    uint16_t lengths[3];
} CharacterData;

const CharacterData characterDataArray[] PROGMEM = {
    {0,1,[0,0,0],[10,0,0]}
};

const uint8_t characterArray[] PROGMEM = {
};





[
0,1,// 0
0,2,
0,3,
1,0,
1,4,
2,0,
2,4,
3,1,
3,2,
3,3,
0,1, // 1
0,4,
1,0,
1,1,
1,2,
1,3,
1,4,
2,4,
0,1, // 2
0,4,
1,0,
1,3,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,1,
4,4,
0,0, // 3
0,4,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,1,
3,2,
3,4,
4,0,
4,3,
0,2, // 4
1,1,
1,2,
2,0,
2,2,
3,0,
3,1,
3,2,
3,3,
3,4,
4,2,
0,0, // 5
0,1,
0,2,
0,4,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,3,
0,1, // 6
0,2,
0,3,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,3,
0,0, // 7
1,0,
1,4,
2,0,
2,3,
3,0,
3,2,
4,0,
4,1,
0,1, // 8
0,3,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,1,
4,3,
0,1, // 9
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,1,
4,2,
4,3,
0,1, // A
0,2,
0,3,
0,4,
1,0,
1,2,
2,0,
2,2,
3,0,
3,2,
4,1,
4,2,
4,3,
4,4,
0,0, // B
0,1,
0,2,
0,3,
0,4,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,1,
4,3,
0,1, // C
0,2,
0,3,
1,0,
1,4,
2,0,
2,4,
3,0,
3,4,
4,1,
4,3,
0,0, // D
0,1,
0,2,
0,3,
0,4,
1,0,
1,4,
2,0,
2,4,
3,0,
3,4,
4,1,
4,2,
4,3,
0,0, // E
0,1,
0,2,
0,3,
0,4,
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,0,
4,4,
0,0, // F
0,1,
0,2,
0,3,
0,4,
1,0,
1,2,
2,0,
2,2,
3,0,
3,2,
4,0,
0,1, // G
0,2,
0,3,
1,0,
1,4,
2,0,
2,4,
3,0,
3,2,
3,4,
4,0,
4,2,
4,3,
4,4,
0,0, // H
0,1,
0,2,
0,3,
0,4,
1,2,
2,2,
3,2,
4,0,
4,1,
4,2,
4,3,
4,4,
0,0, // I
0,4,
1,0,
1,4,
2,0,
2,1,
2,2,
2,3,
2,4,
3,0,
3,4,
4,0,
4,4,
0,3, // J
1,4,
2,4,
3,4,
4,0,
4,1,
4,2,
4,3,
0,0, // K
0,1,
0,2,
0,3,
0,4,
1,3,
2,2,
3,1,
3,3,
4,0,
4,4,
0,0, // L
0,1,
0,2,
0,3,
0,4,
1,4,
2,4,
3,4,
4,4,
0,0, // M
0,1,
0,2,
0,3,
0,4,
1,1,
2,2,
3,1,
4,0,
4,1,
4,2,
4,3,
4,4,
0,0, // N
0,1,
0,2,
0,3,
0,4,
1,1,
2,2,
3,3,
4,0,
4,1,
4,2,
4,3,
4,4,
0,1, // O
0,2,
0,3,
1,0,
1,4,
2,0,
2,4,
3,0,
3,4,
4,1,
4,2,
4,3,
0,0, // P
0,1,
0,2,
0,3,
0,4,
1,0,
1,2,
2,0,
2,2,
3,0,
3,2,
4,1,
0,1, // Q
0,2,
0,3,
1,0,
1,4,
2,0,
2,4,
3,0,
3,3,
3,4,
4,1,
4,2,
4,4,
0,0, // R
0,1,
0,2,
0,3,
0,4,
1,0,
1,2,
2,0,
2,2,
3,0,
3,2,
3,3,
4,1,
4,4,
0,1, // S
1,0,
1,2,
1,4,
2,0,
2,2,
2,4,
3,0,
3,2,
3,4,
4,3,
0,0, // T
1,0,
2,0,
2,1,
2,2,
2,3,
2,4,
3,0,
4,0,
0,0, // U
0,1,
0,2,
0,3,
1,4,
2,4,
3,4,
4,0,
4,1,
4,2,
4,3,
0,0, // V
0,1,
1,2,
1,3,
2,4,
3,2,
3,3,
4,0,
4,1,
0,0, // W
0,1,
0,2,
0,3,
1,4,
2,2,
2,3,
3,4,
4,0,
4,1,
4,2,
4,3,
0,0, // X
0,4,
1,1,
1,3,
2,2,
3,1,
3,3,
4,0,
4,4,
0,0, // Y
1,1,
2,2,
2,3,
2,4,
3,1,
4,0,
0,0, // Z
0,4,
1,0,
1,3,
1,4,
2,0,
2,2,
2,4,
3,0,
3,1,
3,4,
4,0,
4,4,
1,0, // Å
3,0,
1,1,
2,1,
3,1,
0,2,
4,2,
0,3,
1,3,
2,3,
3,3,
4,3,
0,4,
4,4,
1,0, // Ä
3,0,
1,1,
2,1,
3,1,
0,2,
4,2,
0,3,
1,3,
2,3,
3,3,
4,3,
0,4,
4,4,
1,0, // Ö
3,0,
1,1,
2,1,
3,1,
0,2,
4,2,
0,3,
4,3,
1,4,
2,4,
3,4,
, //  
0,0, // !
0,1,
0,2,
0,4,
0,1, // @
0,2,
0,3,
1,0,
1,4,
2,0,
2,1,
2,2,
2,4,
3,0,
3,2,
3,4,
4,1,
4,2,
0,1, // #
0,3,
1,0,
1,1,
1,2,
1,3,
1,4,
2,1,
2,3,
3,0,
3,1,
3,2,
3,3,
3,4,
4,1,
4,3,
0,1, // $
1,0,
1,2,
1,4,
2,0,
2,1,
2,2,
2,3,
2,4,
3,0,
3,2,
3,4,
4,3,
0,0, // %
0,1,
0,4,
1,0,
1,1,
1,3,
2,2,
3,1,
3,3,
3,4,
4,0,
4,3,
4,4,
0,1, // ^
1,0,
2,1,
0,1, // &
0,3,
1,0,
1,2,
1,4,
2,1,
2,3,
3,4,
0,0, // *
0,1,
1,0,
1,1,
0,1, // (
0,2,
0,3,
1,0,
1,4,
0,0, // )
0,4,
1,1,
1,2,
1,3,
0,2, // -
1,2,
2,2,
0,4, // _
1,4,
2,4,
3,4,
0,1, // =
0,3,
1,1,
1,3,
2,1,
2,3,
0,2, // +
1,1,
1,2,
1,3,
2,2,
0,0, // [
0,1,
0,2,
0,3,
0,4,
1,0,
1,4,
0,0, // ]
0,4,
1,0,
1,1,
1,2,
1,3,
1,4,
0,2, // {
1,0,
1,1,
1,3,
1,4,
2,0,
2,4,
0,0, // }
0,4,
1,0,
1,1,
1,3,
1,4,
2,2,
0,3, // /
0,4,
1,2,
2,0,
2,1,
0,0, // \\
0,1,
1,2,
2,3,
2,4,
0,0, // |
0,1,
0,2,
0,3,
0,4,
0,0, // '
0,1,
0,0, // \"
0,1,
2,0,
2,1,
0,0, // >
0,4,
1,1,
1,3,
2,2,
0,2, // <
1,1,
1,3,
2,0,
2,4,
0,4, // .
0,4, // ,
1,3,
0,1, // ?
1,0,
2,0,
2,2,
2,4,
3,1,
0,1, // :
0,3,
0,4, // ;
1,1,
1,3,
0,2, // ~
1,1,
2,1,
3,2,
4,2,
5,1,
0,0, // `
1,1]
